// 找字母.cpp : 定义应用程序的入口点。
//

#include "framework.h"
#include "找字母.h"
#include "time.h" //计算进程运行时间的函数的头文件 
#include"Windows.h"        //SetTimer函数的头文件 

#define MAX_LOADSTRING 100

// 全局变量:
HINSTANCE hInst;                                // 当前实例
WCHAR szTitle[MAX_LOADSTRING];                  // 标题栏文本
WCHAR szWindowClass[MAX_LOADSTRING];            // 主窗口类名

COLORREF color = RGB(0, 255, 255);
int health = 3;
int score = 0;
unsigned long times = 0;
char c;
WCHAR str[64];
char hit;
int font; //Font函数的全局定义 
int timeStep = 3000; //SetTimer函数的全局定义 
char dd;

// 此代码模块中包含的函数的前向声明:
ATOM                MyRegisterClass(HINSTANCE hInstance);
BOOL                InitInstance(HINSTANCE, int);
LRESULT CALLBACK    WndProc(HWND, UINT, WPARAM, LPARAM);
INT_PTR CALLBACK    About(HWND, UINT, WPARAM, LPARAM);

int APIENTRY wWinMain(_In_ HINSTANCE hInstance,
    _In_opt_ HINSTANCE hPrevInstance,
    _In_ LPWSTR    lpCmdLine,
    _In_ int       nCmdShow)
{
    UNREFERENCED_PARAMETER(hPrevInstance);
    UNREFERENCED_PARAMETER(lpCmdLine);

    // TODO: 在此处放置代码。
    c = 'A' + rand() % 26 + (rand() % 2) * 32;
    dd = c - 32;
    times = GetTickCount();

    // 初始化全局字符串
    LoadStringW(hInstance, IDS_APP_TITLE, szTitle, MAX_LOADSTRING);
    LoadStringW(hInstance, IDC_MY, szWindowClass, MAX_LOADSTRING);
    MyRegisterClass(hInstance);

    // 执行应用程序初始化:
    if (!InitInstance(hInstance, nCmdShow))
    {
        return FALSE;
    }

    HACCEL hAccelTable = LoadAccelerators(hInstance, MAKEINTRESOURCE(IDC_MY));

    MSG msg;

    // 主消息循环:
    while (GetMessage(&msg, nullptr, 0, 0))
    {
        if (!TranslateAccelerator(msg.hwnd, hAccelTable, &msg))
        {
            TranslateMessage(&msg);
            DispatchMessage(&msg);
        }
    }

    return (int)msg.wParam;
}



//
//  函数: MyRegisterClass()
//
//  目标: 注册窗口类。
//
ATOM MyRegisterClass(HINSTANCE hInstance)
{
    WNDCLASSEXW wcex;

    wcex.cbSize = sizeof(WNDCLASSEX);

    wcex.style = CS_HREDRAW | CS_VREDRAW;
    wcex.lpfnWndProc = WndProc;
    wcex.cbClsExtra = 0;
    wcex.cbWndExtra = 0;
    wcex.hInstance = hInstance;
    wcex.hIcon = LoadIcon(hInstance, MAKEINTRESOURCE(IDI_MY));
    wcex.hCursor = LoadCursor(nullptr, IDC_ARROW);
    wcex.hbrBackground = (HBRUSH)(COLOR_WINDOW + 1);
    wcex.lpszMenuName = MAKEINTRESOURCEW(IDC_MY);
    wcex.lpszClassName = szWindowClass;
    wcex.hIconSm = LoadIcon(wcex.hInstance, MAKEINTRESOURCE(IDI_SMALL));

    return RegisterClassExW(&wcex);
}

//
//   函数: InitInstance(HINSTANCE, int)
//
//   目标: 保存实例句柄并创建主窗口
//
//   注释:
//
//        在此函数中，我们在全局变量中保存实例句柄并
//        创建和显示主程序窗口。
//
BOOL InitInstance(HINSTANCE hInstance, int nCmdShow)
{
    hInst = hInstance; // 将实例句柄存储在全局变量中

    HWND hWnd = CreateWindowW(szWindowClass, szTitle, WS_OVERLAPPEDWINDOW,
        CW_USEDEFAULT, 0, CW_USEDEFAULT, 0, nullptr, nullptr, hInstance, nullptr);

    if (!hWnd)
    {
        return FALSE;
    }

    ShowWindow(hWnd, nCmdShow);
    UpdateWindow(hWnd);

    return TRUE;
}

//
//  函数: WndProc(HWND, UINT, WPARAM, LPARAM)
//
//  目标: 处理主窗口的消息。
//
//  WM_COMMAND  - 处理应用程序菜单
//  WM_PAINT    - 绘制主窗口
//  WM_DESTROY  - 发送退出消息并返回
//
//
LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)
{
    switch (message)
    {
        //程序启动后触发名为1的Timer 
    case WM_CREATE:
        SetTimer(hWnd,1, timeStep, NULL);
        break;
        //每隔timeStep时间后执行的命令 
    case WM_TIMER:
        if (wParam == 1)
        {
            if (health > 0)        //判断生命值Timer 
            {
                health = health - 1;
                InvalidateRect(hWnd, NULL, TRUE);
            }
        }
        break;
    case WM_COMMAND:
    {
        int wmId = LOWORD(wParam);
        int wmEvent = HIWORD(wParam);
        // 分析菜单选择:
        switch (wmId)
        {
        case IDM_ABOUT:
            DialogBox(hInst, MAKEINTRESOURCE(IDD_ABOUTBOX), hWnd, About);
            break;
        case IDM_EXIT:
            DestroyWindow(hWnd);
            break;
        default:
            return DefWindowProc(hWnd, message, wParam, lParam);
        }
    }
    break;
    case WM_LBUTTONDOWN:					// 鼠标左键按下消息
        color = RGB(255, 0, 0);				// 将字体颜色变换为红色
        InvalidateRect(hWnd, NULL, TRUE);	// 发出重绘消息
        break;
    case WM_MBUTTONDOWN:					// 鼠标中键按下消息
        color = RGB(0, 255, 0);				// 将字体颜色变换为绿色
        InvalidateRect(hWnd, NULL, TRUE);	// 发出重绘消息
        break;
    case WM_RBUTTONDOWN:					// 鼠标右键按下消息
        color = RGB(0, 0, 255);				// 将字体颜色变换为蓝色
        InvalidateRect(hWnd, NULL, TRUE);	// 发出重绘消息
        break;

    case WM_KEYDOWN:
        if (health <= 0)
            break;
        hit = wParam;
        SetTimer(hWnd, 1, timeStep, NULL); //按键后重置timeStep 
        if (hit == c)
        {
            c = 'A' + rand() % 26 + (rand() % 2) * 32;
            dd = c - 32;
            score = score + 1;
        }
        else
        {
            if (hit == dd)
            {
                c = 'A' + rand() % 26 + (rand() % 2) * 32;
                dd = c - 32;
                score = score + 1;
            }
            else
            {
                health = health - 1;
                if (health <= 0)
                    times = GetTickCount() - times;
            }
        }
        InvalidateRect(hWnd, NULL, TRUE);
        break;
    case WM_PAINT:
        //打印所有窗口中的字体 
        void PrintWords(HDC hdc);
        {
            RECT rc;
            PAINTSTRUCT ps;
            HDC hdc = BeginPaint(hWnd, &ps);
            GetClientRect(hWnd, &rc);
            SetBkMode(hdc, TRANSPARENT);
            HFONT hf;
            // TODO: 在此处添加使用 hdc 的任何绘图代码...
            SetTextColor(hdc, color);
            //自定义字体信息 
            hf =
                CreateFont(
                    56,  //字体高度
                    20, //字体宽度
                    0, //字体角度
                    0, //nOrientation
                    50, //大小（磅数）
                    FALSE, //是否斜体
                    FALSE, //是否下划线
                    FALSE, //是否删除线
                    DEFAULT_CHARSET, //缺省字符集
                    OUT_DEFAULT_PRECIS, //缺省输出精度
                    CLIP_DEFAULT_PRECIS, //缺省裁剪精度
                    DEFAULT_QUALITY, //nQuality
                    DEFAULT_PITCH, //nPitchAndFamily
                    L"微软雅黑"); //字体名
            HFONT hfold = (HFONT)SelectObject(hdc, hf);
            TextOut(hdc, 0, 0, L"请正确输入下方显示的字符", 12);
            swprintf(str, 64, L"生命值:%d", health);
            TextOut(hdc, 550, 0, str, wcslen(str));

            swprintf(str, 64, L"得分:%d", score);
            TextOut(hdc, 750, 0, str, wcslen(str));

            swprintf(str, 64, L"总用时:%d，当前若三秒内无输入则生命值-1", clock() / 1000); //计算进程运行时间的函数 ©FeverDreamOAO
            TextOut(hdc, 950, 0, str, wcslen(str));


            if (health <= 0)
            {
                swprintf(str, 64, L"游戏结束，手速:%.2f 个/秒",
                    float(score * 1000) / times);
                TextOut(hdc, 10, 90, str, wcslen(str));
            }
            else
                swprintf(str, 64, L"%c", c);
            TextOut(hdc, 10, 90, str, wcslen(str));

            EndPaint(hWnd, &ps);
        }
        break;
    case WM_DESTROY:
        PostQuitMessage(0);
        break;
    default:
        return DefWindowProc(hWnd, message, wParam, lParam);
    }
    return 0;
}

// “关于”框的消息处理程序。
INT_PTR CALLBACK About(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)
{
    UNREFERENCED_PARAMETER(lParam);
    switch (message)
    {
    case WM_INITDIALOG:
        return (INT_PTR)TRUE;

    case WM_COMMAND:
        if (LOWORD(wParam) == IDOK || LOWORD(wParam) == IDCANCEL)
        {
            EndDialog(hDlg, LOWORD(wParam));
            return (INT_PTR)TRUE;
        }
        break;
    }
    return (INT_PTR)FALSE;
}